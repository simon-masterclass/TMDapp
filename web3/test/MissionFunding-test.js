/** @format */

const { expect } = require("chai");
const MissionFunding = artifacts.require("MissionFunding");
const { soliditySha3 } = require("web3-utils");

contract("MissionFunding", (accounts) => {
  let instance;
  let merkleRoot = soliditySha3(accounts[0]);

  beforeEach(async () => {
    instance = await MissionFunding.new(accounts[0], merkleRoot);
  });

  it("Should create a campaign", async () => {
    const title = "Test Campaign";
    const description = "This is a test campaign for testing";
    const image = "https://example.com/image.png";
    const globalGoalTargets = "10k";
    const fundingTarget = 100;
    const deadline = Math.floor(Date.now() / 1000) + 86400;
    const owner = accounts[1];
    const active = true;
    const proof = [soliditySha3(accounts[0])];

    const campaignId = await instance.createCampaign(
      title,
      description,
      image,
      globalGoalTargets,
      fundingTarget,
      deadline,
      owner,
      active,
      proof
    );

    const campaign = await instance.campaigns(campaignId);
    expect(campaign.title).to.equal(title);
    expect(campaign.description).to.equal(description);
    expect(campaign.image).to.equal(image);
    expect(campaign.globalGoalTargets).to.equal(globalGoalTargets);
    expect(campaign.fundingTarget.toNumber()).to.equal(fundingTarget);
    expect(campaign.deadline.toNumber()).to.equal(deadline);
    expect(campaign.owner).to.equal(owner);
    expect(campaign.active).to.equal(active);
  });

  it("Should donate to a campaign", async () => {
    const title = "Test Campaign";
    const description = "This is a test campaign for testing";
    const image = "https://example.com/image.png";
    const globalGoalTargets = "10k";
    const fundingTarget = 100;
    const deadline = Math.floor(Date.now() / 1000) + 86400;
    const owner = accounts[1];
    const active = true;
    const proof = [soliditySha3(accounts[0])];

    const campaignId = await instance.createCampaign(
      title,
      description,
      image,
      globalGoalTargets,
      fundingTarget,
      deadline,
      owner,
      active,
      proof
    );

    const donationAmount = 10;
    await instance.donateToCampaign(campaignId, {
      value: donationAmount,
      from: accounts[2],
    });

    const [donators, donations] = await instance.getDonators(campaignId);
    expect(donators[0]).to.equal(accounts[2]);
    expect(donations[0].toNumber()).to.equal(donationAmount);
  });

  it("Should not allow a user to donate to a campaign that does not exist", async () => {
    try {
      await instance.donateToCampaign(1, { value: 10, from: accounts[2] });
    } catch (error) {
      expect(error.message).to.equal(
        "Returned error: VM Exception while processing transaction: revert Campaign does not exist"
      );
    }
  });
});

//  Second test generated by ChatGPT-3
// const { expect } = require("chai");
// const MissionFunding = artifacts.require("MissionFunding");

// contract("MissionFunding", accounts => {
//   const missionCommander = accounts[0];
//   const owner = accounts[1];
//   let missionFundingInstance;

//   beforeEach(async () => {
//     missionFundingInstance = await MissionFunding.new(missionCommander, web3.utils.sha3("merkle-root"));
//   });

//   it("should create a new campaign", async () => {
//     const result = await missionFundingInstance.createCampaign(
//       "Title",
//       "Description",
//       "Image",
//       "Global goal targets",
//       100,
//       (new Date() / 1000) + 60 * 60 * 24 * 7,
//       owner,
//       true,
//       [],
//       { from: missionCommander }
//     );
//     expect(result.logs[0].event).to.equal("CampaignCreated");
//   });

//   it("should not create a campaign with a deadline in the past", async () => {
//     try {
//       await missionFundingInstance.createCampaign(
//         "Title",
//         "Description",
//         "Image",
//         "Global goal targets",
//         100,
//         (new Date() / 1000) - 60 * 60 * 24 * 7,
//         owner,
//         true,
//         [],
//         { from: missionCommander }
//       );
//     } catch (error) {
//       expect(error.message).to.equal("Returned error: VM Exception while processing transaction: revert The deadline should be a date in the future");
//     }
//   });

//   it("should not create a campaign with an invalid merkle proof", async () => {
//     try {
//       await missionFundingInstance.createCampaign(
//         "Title",
//         "Description",
//         "Image",
//         "Global goal targets",
//         100,
//         (new Date() / 1000) + 60 * 60 * 24 * 7,
//         owner,
//         true,
//         [web3.utils.sha3("invalid-proof")],
//         { from: missionCommander }
//       );
//     } catch (error) {
//       expect(error.message).to.equal("Returned error: VM Exception while processing transaction: revert Not allowed to create a campaign - not a valid merkle proof. Are you sure you are on the list?");
//     }
//   });

//   it("should allow a user to donate to a campaign", async () => {
//     const campaignId = (await missionFundingInstance.createCampaign(
//       "Title",
//       "Description",
//       "Image",
//       "Global goal targets",
//       100,
//       (new Date() / 1000) + 60 * 60 * 24 * 7,
//       owner,
//       true,
//       [],
//       { from: missionCommander }
//     )).logs[0].args.id.toNumber();

//     const result = await missionFundingInstance.donateToCampaign(campaignId, { from: accounts[2], value: 10 });
//     expect(result.logs[0].event).to.equal("CampaignFunded");
//   });

//   it("should not allow a user to donate to an inactive campaign", async () => {
//     const inactiveCampaignId = await createCampaign("Inactive Campaign", 100, 100);
//     await instance.createCampaign(
//         "Inactive Campaign",
//         "This is an inactive campaign",
//         "",
//         "",
//         100,
//         200,
//         accounts[1],
//         false,
//         [],
//         { from: missionCommander }
//     );
//     await truffleAssert.reverts(
//         instance.donateToCampaign(inactiveCampaignId, { from: accounts[0], value: 1 }),
//         "Campaign is not active anymore."
//     );
